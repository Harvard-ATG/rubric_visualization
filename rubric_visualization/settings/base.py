"""
Django settings for rubric_visualization project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import logging
from .secure import SECURE_SETTINGS

CSRF_TRUSTED_ORIGINS = ['canvas.harvard.edu']

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = os.path.dirname(BASE_DIR)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SECURE_SETTINGS.get('django_secret_key', 'changeme')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = SECURE_SETTINGS.get('enable_debug', False)

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'canvas_oauth.apps.CanvasOAuthConfig',
    'frontend.apps.FrontendConfig',
    'rubric_data.apps.RubricDataConfig',
    'lti_provider',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'canvas_oauth.middleware.OAuthMiddleware',
]

ROOT_URLCONF = 'rubric_visualization.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Database

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': SECURE_SETTINGS.get('db_default_name', 'rubric_visualization'),
        'USER': SECURE_SETTINGS.get('db_default_user', 'postgres'),
        'PASSWORD': SECURE_SETTINGS.get('db_default_password'),
        'HOST': SECURE_SETTINGS.get('db_default_host', '127.0.0.1'),
        'PORT': SECURE_SETTINGS.get('db_default_port', 5432),  # Default postgres port
    }
}

# Cache
# https://docs.djangoproject.com/en/3.0/topics/cache/

REDIS_HOST = SECURE_SETTINGS.get('redis_host', '127.0.0.1')
REDIS_PORT = SECURE_SETTINGS.get('redis_port', 6379)

CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': "redis://%s:%s/0" % (REDIS_HOST, REDIS_PORT),
        'OPTIONS': {
            'PARSER_CLASS': 'redis.connection.HiredisParser'
        },
        'KEY_PREFIX': 'rubric_visualization',  # Provide a unique value for intra-app cache
        'TIMEOUT': SECURE_SETTINGS.get('default_cache_timeout_secs', 300),
    }
}

WSGI_APPLICATION = 'rubric_visualization.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.normpath(os.path.join(PROJECT_ROOT, 'http_static'))

# Sessions

SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Logging 

_DEFAULT_LOG_LEVEL = SECURE_SETTINGS.get('log_level', logging.DEBUG)
_LOG_ROOT = SECURE_SETTINGS.get('log_root', '')  # Default to current directory

LOGGING_CONFIG = None

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s\t%(asctime)s.%(msecs)03dZ\t%(name)s:%(lineno)s\t%(message)s',
            'datefmt': '%Y-%m-%dT%H:%M:%S'
        },
        'simple': {
            'format': '%(levelname)s\t%(name)s:%(lineno)s\t%(message)s',
        }
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'root': {
        'level': logging.WARNING,
        'handlers': ['default'],
    },
    'handlers': {
        # Log to a file by default that can be rotated by logrotate
        'default': {
            'class': 'logging.handlers.WatchedFileHandler',
            'level': _DEFAULT_LOG_LEVEL,
            'formatter': 'verbose',
            'filename': os.path.join(_LOG_ROOT, 'django-rubric_visualization.log'),
        },
        'console': {
            'class': 'logging.StreamHandler',
            'level': _DEFAULT_LOG_LEVEL,
            'formatter': 'simple',
            'filters': ['require_debug_true'],
        },
    },
    'loggers': {
        'canvas_oauth': {
             'level': logging.DEBUG,
             'handlers': ['default', 'console'],
             'propagate': False,
        },
        'frontend': {
             'level': logging.DEBUG,
             'handlers': ['default', 'console'],
             'propagate': False,
        },
        'rubric_data': {
             'level': logging.DEBUG,
             'handlers': ['default', 'console'],
             'propagate': False,
        },
    }
}

# LTI configuration

LTI_TOOL_CONFIGURATION = {
    'title': 'Rubric Visualization',
    'description': 'An LTI-compliant tool that enables instructors and administrators to visualize rubric data.',
    'launch_url': 'lti/',
    'embed_url': '',
    'embed_icon_url': '',
    'embed_tool_id': '',
    'landing_url': '/',
    'course_navigation': {
        "default": "disabled",
        "enabled": "true",
        "visibility": "admins",
    },
    'new_tab': False,
    'course_aware': False,
}


PYLTI_CONFIG = {
    'consumers': {
        SECURE_SETTINGS['consumer_key']: {
            'secret': SECURE_SETTINGS['lti_secret']
        }
    }
}

# This setting will add an LTI property to the session
LTI_PROPERTY_LIST_EX = ['custom_canvas_course_id']

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'lti_provider.auth.LTIBackend',
]

SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"
SESSION_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SECURE = True

# Canvas domain for authorizing and retrieving rubric data
CANVAS_DOMAIN = SECURE_SETTINGS.get('canvas_domain', 'https://canvas.localhost')

# Settings for canvas_oauth (https://github.com/harvard-university-icommons/django-canvas-oauth)
# This library initiates the oauth2 flow for a user to obtain a token for API requests.
CANVAS_OAUTH_CANVAS_DOMAIN = CANVAS_DOMAIN
CANVAS_OAUTH_CLIENT_ID = SECURE_SETTINGS.get('canvas_oauth_client_id')
CANVAS_OAUTH_CLIENT_SECRET = SECURE_SETTINGS.get('canvas_oauth_client_secret')
CANVAS_OAUTH_SCOPES = [
    'url:GET|/api/v1/courses/:course_id/assignments',
    'url:GET|/api/v1/courses/:course_id/users',
    'url:GET|/api/v1/courses/:course_id/students',
    'url:GET|/api/v1/courses/:course_id/assignments/:assignment_id/submissions',
    'url:GET|/api/v1/courses/:course_id/rubrics',
    'url:GET|/api/v1/courses/:course_id/rubrics/:id',
    'url:GET|/api/v1/courses/:course_id/sections',
    'url:GET|/api/v1/courses/:course_id/sections/:id',
]

# Settings for the canvas_sdk (https://github.com/penzance/canvas_python_sdk)
# These settings can be passed to the sdk method functions or when creating
# an instance of canvas_sdk.client.RequestContext().
# Note: the `auth_token` is excluded because it should be obtained for each user.
CANVAS_SDK_SETTINGS = {
    'base_api_url': f"https://{CANVAS_DOMAIN}/api",
    'max_retries': 3,
    'per_page': 100,
}
